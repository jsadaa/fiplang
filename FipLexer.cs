//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Fip.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FipLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, COMMENT=3, MULTILINE_COMMENT=4, CONCAT=5, SEMICOLON=6, 
		ASTERISK=7, SLASH=8, PLUS=9, MINUS=10, EQUALS=11, NOTEQUALS=12, LESS=13, 
		GREATER=14, LESSEQUALS=15, GREATEREQUALS=16, ASSIGN=17, VALUETYPE=18, 
		SET=19, PRINT=20, UPDATE=21, MEM=22, FREEMEM=23, BOOL=24, STRING=25, IDENTIFIER=26, 
		REFERENCE=27, DOUBLE=28, INTEGER=29, NEWLINE=30, WHITESPACE=31;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LETTER", "DIGIT", "AT", "COMMENT", "MULTILINE_COMMENT", 
		"CONCAT", "SEMICOLON", "ASTERISK", "SLASH", "PLUS", "MINUS", "EQUALS", 
		"NOTEQUALS", "LESS", "GREATER", "LESSEQUALS", "GREATEREQUALS", "ASSIGN", 
		"VALUETYPE", "SET", "PRINT", "UPDATE", "MEM", "FREEMEM", "BOOL", "STRING", 
		"IDENTIFIER", "REFERENCE", "DOUBLE", "INTEGER", "NEWLINE", "WHITESPACE"
	};


	public FipLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FipLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, "'.'", "';'", "'*'", "'/'", "'+'", "'-'", 
		"'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'='", null, "'set'", "'print'", 
		"'mod'", "'mem'", "'freemem'", null, null, null, null, null, null, null, 
		"' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "COMMENT", "MULTILINE_COMMENT", "CONCAT", "SEMICOLON", 
		"ASTERISK", "SLASH", "PLUS", "MINUS", "EQUALS", "NOTEQUALS", "LESS", "GREATER", 
		"LESSEQUALS", "GREATEREQUALS", "ASSIGN", "VALUETYPE", "SET", "PRINT", 
		"UPDATE", "MEM", "FREEMEM", "BOOL", "STRING", "IDENTIFIER", "REFERENCE", 
		"DOUBLE", "INTEGER", "NEWLINE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fip.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FipLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,31,248,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,5,5,84,8,5,10,5,12,5,87,9,5,1,
		5,3,5,90,8,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,100,8,6,10,6,12,6,103,
		9,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
		12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
		17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,159,8,20,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,
		1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,3,26,196,8,26,1,27,1,27,5,27,200,8,27,10,
		27,12,27,203,9,27,1,27,1,27,1,28,1,28,1,28,5,28,210,8,28,10,28,12,28,213,
		9,28,1,29,1,29,1,29,1,29,5,29,219,8,29,10,29,12,29,222,9,29,1,30,4,30,
		225,8,30,11,30,12,30,226,1,30,1,30,4,30,231,8,30,11,30,12,30,232,1,31,
		4,31,236,8,31,11,31,12,31,237,1,32,4,32,241,8,32,11,32,12,32,242,1,33,
		1,33,1,33,1,33,3,85,101,201,0,34,1,1,3,2,5,0,7,0,9,0,11,3,13,4,15,5,17,
		6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,15,37,16,39,17,41,18,
		43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,
		67,31,1,0,3,2,0,65,90,97,122,1,0,48,57,2,0,10,10,13,13,260,0,1,1,0,0,0,
		0,3,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
		0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,71,1,0,0,0,5,73,1,0,0,
		0,7,75,1,0,0,0,9,77,1,0,0,0,11,79,1,0,0,0,13,95,1,0,0,0,15,109,1,0,0,0,
		17,111,1,0,0,0,19,113,1,0,0,0,21,115,1,0,0,0,23,117,1,0,0,0,25,119,1,0,
		0,0,27,121,1,0,0,0,29,124,1,0,0,0,31,127,1,0,0,0,33,129,1,0,0,0,35,131,
		1,0,0,0,37,134,1,0,0,0,39,137,1,0,0,0,41,158,1,0,0,0,43,160,1,0,0,0,45,
		164,1,0,0,0,47,170,1,0,0,0,49,174,1,0,0,0,51,178,1,0,0,0,53,195,1,0,0,
		0,55,197,1,0,0,0,57,206,1,0,0,0,59,214,1,0,0,0,61,224,1,0,0,0,63,235,1,
		0,0,0,65,240,1,0,0,0,67,244,1,0,0,0,69,70,5,40,0,0,70,2,1,0,0,0,71,72,
		5,41,0,0,72,4,1,0,0,0,73,74,7,0,0,0,74,6,1,0,0,0,75,76,7,1,0,0,76,8,1,
		0,0,0,77,78,5,64,0,0,78,10,1,0,0,0,79,80,5,47,0,0,80,81,5,47,0,0,81,85,
		1,0,0,0,82,84,9,0,0,0,83,82,1,0,0,0,84,87,1,0,0,0,85,86,1,0,0,0,85,83,
		1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,88,90,5,13,0,0,89,88,1,0,0,0,89,90,
		1,0,0,0,90,91,1,0,0,0,91,92,5,10,0,0,92,93,1,0,0,0,93,94,6,5,0,0,94,12,
		1,0,0,0,95,96,5,47,0,0,96,97,5,42,0,0,97,101,1,0,0,0,98,100,9,0,0,0,99,
		98,1,0,0,0,100,103,1,0,0,0,101,102,1,0,0,0,101,99,1,0,0,0,102,104,1,0,
		0,0,103,101,1,0,0,0,104,105,5,42,0,0,105,106,5,47,0,0,106,107,1,0,0,0,
		107,108,6,6,0,0,108,14,1,0,0,0,109,110,5,46,0,0,110,16,1,0,0,0,111,112,
		5,59,0,0,112,18,1,0,0,0,113,114,5,42,0,0,114,20,1,0,0,0,115,116,5,47,0,
		0,116,22,1,0,0,0,117,118,5,43,0,0,118,24,1,0,0,0,119,120,5,45,0,0,120,
		26,1,0,0,0,121,122,5,61,0,0,122,123,5,61,0,0,123,28,1,0,0,0,124,125,5,
		33,0,0,125,126,5,61,0,0,126,30,1,0,0,0,127,128,5,60,0,0,128,32,1,0,0,0,
		129,130,5,62,0,0,130,34,1,0,0,0,131,132,5,60,0,0,132,133,5,61,0,0,133,
		36,1,0,0,0,134,135,5,62,0,0,135,136,5,61,0,0,136,38,1,0,0,0,137,138,5,
		61,0,0,138,40,1,0,0,0,139,140,5,105,0,0,140,141,5,110,0,0,141,159,5,116,
		0,0,142,143,5,100,0,0,143,144,5,111,0,0,144,145,5,117,0,0,145,146,5,98,
		0,0,146,147,5,108,0,0,147,159,5,101,0,0,148,149,5,115,0,0,149,150,5,116,
		0,0,150,151,5,114,0,0,151,152,5,105,0,0,152,153,5,110,0,0,153,159,5,103,
		0,0,154,155,5,98,0,0,155,156,5,111,0,0,156,157,5,111,0,0,157,159,5,108,
		0,0,158,139,1,0,0,0,158,142,1,0,0,0,158,148,1,0,0,0,158,154,1,0,0,0,159,
		42,1,0,0,0,160,161,5,115,0,0,161,162,5,101,0,0,162,163,5,116,0,0,163,44,
		1,0,0,0,164,165,5,112,0,0,165,166,5,114,0,0,166,167,5,105,0,0,167,168,
		5,110,0,0,168,169,5,116,0,0,169,46,1,0,0,0,170,171,5,109,0,0,171,172,5,
		111,0,0,172,173,5,100,0,0,173,48,1,0,0,0,174,175,5,109,0,0,175,176,5,101,
		0,0,176,177,5,109,0,0,177,50,1,0,0,0,178,179,5,102,0,0,179,180,5,114,0,
		0,180,181,5,101,0,0,181,182,5,101,0,0,182,183,5,109,0,0,183,184,5,101,
		0,0,184,185,5,109,0,0,185,52,1,0,0,0,186,187,5,116,0,0,187,188,5,114,0,
		0,188,189,5,117,0,0,189,196,5,101,0,0,190,191,5,102,0,0,191,192,5,97,0,
		0,192,193,5,108,0,0,193,194,5,115,0,0,194,196,5,101,0,0,195,186,1,0,0,
		0,195,190,1,0,0,0,196,54,1,0,0,0,197,201,5,34,0,0,198,200,9,0,0,0,199,
		198,1,0,0,0,200,203,1,0,0,0,201,202,1,0,0,0,201,199,1,0,0,0,202,204,1,
		0,0,0,203,201,1,0,0,0,204,205,5,34,0,0,205,56,1,0,0,0,206,211,3,5,2,0,
		207,210,3,5,2,0,208,210,3,7,3,0,209,207,1,0,0,0,209,208,1,0,0,0,210,213,
		1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,58,1,0,0,0,213,211,1,0,0,0,
		214,215,3,9,4,0,215,220,3,5,2,0,216,219,3,5,2,0,217,219,3,7,3,0,218,216,
		1,0,0,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,
		0,221,60,1,0,0,0,222,220,1,0,0,0,223,225,3,7,3,0,224,223,1,0,0,0,225,226,
		1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,230,5,46,0,
		0,229,231,3,7,3,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,
		233,1,0,0,0,233,62,1,0,0,0,234,236,3,7,3,0,235,234,1,0,0,0,236,237,1,0,
		0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,64,1,0,0,0,239,241,7,2,0,0,240,
		239,1,0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,66,1,0,
		0,0,244,245,5,32,0,0,245,246,1,0,0,0,246,247,6,33,0,0,247,68,1,0,0,0,15,
		0,85,89,101,158,195,201,209,211,218,220,226,232,237,242,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
