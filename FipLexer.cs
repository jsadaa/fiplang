//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Fip.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FipLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, COMMENT=3, MULTILINE_COMMENT=4, CONCAT=5, SEMICOLON=6, 
		ASTERISK=7, SLASH=8, PLUS=9, MINUS=10, ASSIGN=11, VALUETYPE=12, SET=13, 
		PRINT=14, UPDATE=15, MEM=16, FREEMEM=17, STRING=18, IDENTIFIER=19, REFERENCE=20, 
		DOUBLE=21, INTEGER=22, NEWLINE=23, WHITESPACE=24;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LETTER", "DIGIT", "AT", "COMMENT", "MULTILINE_COMMENT", 
		"CONCAT", "SEMICOLON", "ASTERISK", "SLASH", "PLUS", "MINUS", "ASSIGN", 
		"VALUETYPE", "SET", "PRINT", "UPDATE", "MEM", "FREEMEM", "STRING", "IDENTIFIER", 
		"REFERENCE", "DOUBLE", "INTEGER", "NEWLINE", "WHITESPACE"
	};


	public FipLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FipLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, "'.'", "';'", "'*'", "'/'", "'+'", "'-'", 
		"'to'", null, "'set'", "'print'", "'mod'", "'mem'", "'freemem'", null, 
		null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "COMMENT", "MULTILINE_COMMENT", "CONCAT", "SEMICOLON", 
		"ASTERISK", "SLASH", "PLUS", "MINUS", "ASSIGN", "VALUETYPE", "SET", "PRINT", 
		"UPDATE", "MEM", "FREEMEM", "STRING", "IDENTIFIER", "REFERENCE", "DOUBLE", 
		"INTEGER", "NEWLINE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fip.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FipLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,24,204,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,5,5,70,8,5,10,5,12,5,73,9,5,1,
		5,3,5,76,8,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,86,8,6,10,6,12,6,89,9,
		6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,3,14,126,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,
		16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,5,20,156,8,20,10,20,12,20,159,9,
		20,1,20,1,20,1,21,1,21,1,21,5,21,166,8,21,10,21,12,21,169,9,21,1,22,1,
		22,1,22,1,22,5,22,175,8,22,10,22,12,22,178,9,22,1,23,4,23,181,8,23,11,
		23,12,23,182,1,23,1,23,4,23,187,8,23,11,23,12,23,188,1,24,4,24,192,8,24,
		11,24,12,24,193,1,25,4,25,197,8,25,11,25,12,25,198,1,26,1,26,1,26,1,26,
		3,71,87,157,0,27,1,1,3,2,5,0,7,0,9,0,11,3,13,4,15,5,17,6,19,7,21,8,23,
		9,25,10,27,11,29,12,31,13,33,14,35,15,37,16,39,17,41,18,43,19,45,20,47,
		21,49,22,51,23,53,24,1,0,3,2,0,65,90,97,122,1,0,48,57,2,0,10,10,13,13,
		214,0,1,1,0,0,0,0,3,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,61,
		1,0,0,0,9,63,1,0,0,0,11,65,1,0,0,0,13,81,1,0,0,0,15,95,1,0,0,0,17,97,1,
		0,0,0,19,99,1,0,0,0,21,101,1,0,0,0,23,103,1,0,0,0,25,105,1,0,0,0,27,107,
		1,0,0,0,29,125,1,0,0,0,31,127,1,0,0,0,33,131,1,0,0,0,35,137,1,0,0,0,37,
		141,1,0,0,0,39,145,1,0,0,0,41,153,1,0,0,0,43,162,1,0,0,0,45,170,1,0,0,
		0,47,180,1,0,0,0,49,191,1,0,0,0,51,196,1,0,0,0,53,200,1,0,0,0,55,56,5,
		40,0,0,56,2,1,0,0,0,57,58,5,41,0,0,58,4,1,0,0,0,59,60,7,0,0,0,60,6,1,0,
		0,0,61,62,7,1,0,0,62,8,1,0,0,0,63,64,5,64,0,0,64,10,1,0,0,0,65,66,5,47,
		0,0,66,67,5,47,0,0,67,71,1,0,0,0,68,70,9,0,0,0,69,68,1,0,0,0,70,73,1,0,
		0,0,71,72,1,0,0,0,71,69,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,74,76,5,13,
		0,0,75,74,1,0,0,0,75,76,1,0,0,0,76,77,1,0,0,0,77,78,5,10,0,0,78,79,1,0,
		0,0,79,80,6,5,0,0,80,12,1,0,0,0,81,82,5,47,0,0,82,83,5,42,0,0,83,87,1,
		0,0,0,84,86,9,0,0,0,85,84,1,0,0,0,86,89,1,0,0,0,87,88,1,0,0,0,87,85,1,
		0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,90,91,5,42,0,0,91,92,5,47,0,0,92,93,
		1,0,0,0,93,94,6,6,0,0,94,14,1,0,0,0,95,96,5,46,0,0,96,16,1,0,0,0,97,98,
		5,59,0,0,98,18,1,0,0,0,99,100,5,42,0,0,100,20,1,0,0,0,101,102,5,47,0,0,
		102,22,1,0,0,0,103,104,5,43,0,0,104,24,1,0,0,0,105,106,5,45,0,0,106,26,
		1,0,0,0,107,108,5,116,0,0,108,109,5,111,0,0,109,28,1,0,0,0,110,111,5,105,
		0,0,111,112,5,110,0,0,112,126,5,116,0,0,113,114,5,100,0,0,114,115,5,111,
		0,0,115,116,5,117,0,0,116,117,5,98,0,0,117,118,5,108,0,0,118,126,5,101,
		0,0,119,120,5,115,0,0,120,121,5,116,0,0,121,122,5,114,0,0,122,123,5,105,
		0,0,123,124,5,110,0,0,124,126,5,103,0,0,125,110,1,0,0,0,125,113,1,0,0,
		0,125,119,1,0,0,0,126,30,1,0,0,0,127,128,5,115,0,0,128,129,5,101,0,0,129,
		130,5,116,0,0,130,32,1,0,0,0,131,132,5,112,0,0,132,133,5,114,0,0,133,134,
		5,105,0,0,134,135,5,110,0,0,135,136,5,116,0,0,136,34,1,0,0,0,137,138,5,
		109,0,0,138,139,5,111,0,0,139,140,5,100,0,0,140,36,1,0,0,0,141,142,5,109,
		0,0,142,143,5,101,0,0,143,144,5,109,0,0,144,38,1,0,0,0,145,146,5,102,0,
		0,146,147,5,114,0,0,147,148,5,101,0,0,148,149,5,101,0,0,149,150,5,109,
		0,0,150,151,5,101,0,0,151,152,5,109,0,0,152,40,1,0,0,0,153,157,5,34,0,
		0,154,156,9,0,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,158,1,0,0,0,157,
		155,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,5,34,0,0,161,42,1,
		0,0,0,162,167,3,5,2,0,163,166,3,5,2,0,164,166,3,7,3,0,165,163,1,0,0,0,
		165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,44,
		1,0,0,0,169,167,1,0,0,0,170,171,3,9,4,0,171,176,3,5,2,0,172,175,3,5,2,
		0,173,175,3,7,3,0,174,172,1,0,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,
		174,1,0,0,0,176,177,1,0,0,0,177,46,1,0,0,0,178,176,1,0,0,0,179,181,3,7,
		3,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,
		184,1,0,0,0,184,186,5,46,0,0,185,187,3,7,3,0,186,185,1,0,0,0,187,188,1,
		0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,48,1,0,0,0,190,192,3,7,3,0,191,
		190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,50,1,0,
		0,0,195,197,7,2,0,0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,
		199,1,0,0,0,199,52,1,0,0,0,200,201,5,32,0,0,201,202,1,0,0,0,202,203,6,
		26,0,0,203,54,1,0,0,0,14,0,71,75,87,125,157,165,167,174,176,182,188,193,
		198,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
