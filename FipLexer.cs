//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Fip.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FipLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, COMMENT=3, MULTILINE_COMMENT=4, CONCAT=5, SEMICOLON=6, 
		ASTERISK=7, SLASH=8, PLUS=9, MINUS=10, EQUALS=11, NOTEQUALS=12, LESS=13, 
		GREATER=14, LESSEQUALS=15, GREATEREQUALS=16, IF=17, THEN=18, ELSE=19, 
		ENDIF=20, ASSIGN=21, VALUETYPE=22, SET=23, PRINT=24, UPDATE=25, MEM=26, 
		FREEMEM=27, BOOL=28, STRING=29, IDENTIFIER=30, REFERENCE=31, DOUBLE=32, 
		INTEGER=33, NEWLINE=34, WHITESPACE=35;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LETTER", "DIGIT", "AT", "COMMENT", "MULTILINE_COMMENT", 
		"CONCAT", "SEMICOLON", "ASTERISK", "SLASH", "PLUS", "MINUS", "EQUALS", 
		"NOTEQUALS", "LESS", "GREATER", "LESSEQUALS", "GREATEREQUALS", "IF", "THEN", 
		"ELSE", "ENDIF", "ASSIGN", "VALUETYPE", "SET", "PRINT", "UPDATE", "MEM", 
		"FREEMEM", "BOOL", "STRING", "IDENTIFIER", "REFERENCE", "DOUBLE", "INTEGER", 
		"NEWLINE", "WHITESPACE"
	};


	public FipLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FipLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, "'.'", "';'", "'*'", "'/'", "'+'", "'-'", 
		"'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'if'", "'then'", "'else'", 
		"'endif'", "'to'", null, "'set'", "'print'", "'mod'", "'mem'", "'freemem'", 
		null, null, null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "COMMENT", "MULTILINE_COMMENT", "CONCAT", "SEMICOLON", 
		"ASTERISK", "SLASH", "PLUS", "MINUS", "EQUALS", "NOTEQUALS", "LESS", "GREATER", 
		"LESSEQUALS", "GREATEREQUALS", "IF", "THEN", "ELSE", "ENDIF", "ASSIGN", 
		"VALUETYPE", "SET", "PRINT", "UPDATE", "MEM", "FREEMEM", "BOOL", "STRING", 
		"IDENTIFIER", "REFERENCE", "DOUBLE", "INTEGER", "NEWLINE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fip.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FipLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,35,276,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,5,1,5,5,5,92,8,5,10,5,12,5,95,9,5,1,5,3,5,98,8,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,5,6,108,8,6,10,6,12,6,111,9,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
		7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,
		14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,
		19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
		22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,187,8,24,1,25,
		1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
		1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,3,30,224,8,30,1,31,1,31,5,31,228,8,31,10,
		31,12,31,231,9,31,1,31,1,31,1,32,1,32,1,32,5,32,238,8,32,10,32,12,32,241,
		9,32,1,33,1,33,1,33,1,33,5,33,247,8,33,10,33,12,33,250,9,33,1,34,4,34,
		253,8,34,11,34,12,34,254,1,34,1,34,4,34,259,8,34,11,34,12,34,260,1,35,
		4,35,264,8,35,11,35,12,35,265,1,36,4,36,269,8,36,11,36,12,36,270,1,37,
		1,37,1,37,1,37,3,93,109,229,0,38,1,1,3,2,5,0,7,0,9,0,11,3,13,4,15,5,17,
		6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,15,37,16,39,17,41,18,
		43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,
		67,31,69,32,71,33,73,34,75,35,1,0,3,2,0,65,90,97,122,1,0,48,57,2,0,10,
		10,13,13,288,0,1,1,0,0,0,0,3,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,5,81,
		1,0,0,0,7,83,1,0,0,0,9,85,1,0,0,0,11,87,1,0,0,0,13,103,1,0,0,0,15,117,
		1,0,0,0,17,119,1,0,0,0,19,121,1,0,0,0,21,123,1,0,0,0,23,125,1,0,0,0,25,
		127,1,0,0,0,27,129,1,0,0,0,29,132,1,0,0,0,31,135,1,0,0,0,33,137,1,0,0,
		0,35,139,1,0,0,0,37,142,1,0,0,0,39,145,1,0,0,0,41,148,1,0,0,0,43,153,1,
		0,0,0,45,158,1,0,0,0,47,164,1,0,0,0,49,186,1,0,0,0,51,188,1,0,0,0,53,192,
		1,0,0,0,55,198,1,0,0,0,57,202,1,0,0,0,59,206,1,0,0,0,61,223,1,0,0,0,63,
		225,1,0,0,0,65,234,1,0,0,0,67,242,1,0,0,0,69,252,1,0,0,0,71,263,1,0,0,
		0,73,268,1,0,0,0,75,272,1,0,0,0,77,78,5,40,0,0,78,2,1,0,0,0,79,80,5,41,
		0,0,80,4,1,0,0,0,81,82,7,0,0,0,82,6,1,0,0,0,83,84,7,1,0,0,84,8,1,0,0,0,
		85,86,5,64,0,0,86,10,1,0,0,0,87,88,5,47,0,0,88,89,5,47,0,0,89,93,1,0,0,
		0,90,92,9,0,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,94,1,0,0,0,93,91,1,0,0,
		0,94,97,1,0,0,0,95,93,1,0,0,0,96,98,5,13,0,0,97,96,1,0,0,0,97,98,1,0,0,
		0,98,99,1,0,0,0,99,100,5,10,0,0,100,101,1,0,0,0,101,102,6,5,0,0,102,12,
		1,0,0,0,103,104,5,47,0,0,104,105,5,42,0,0,105,109,1,0,0,0,106,108,9,0,
		0,0,107,106,1,0,0,0,108,111,1,0,0,0,109,110,1,0,0,0,109,107,1,0,0,0,110,
		112,1,0,0,0,111,109,1,0,0,0,112,113,5,42,0,0,113,114,5,47,0,0,114,115,
		1,0,0,0,115,116,6,6,0,0,116,14,1,0,0,0,117,118,5,46,0,0,118,16,1,0,0,0,
		119,120,5,59,0,0,120,18,1,0,0,0,121,122,5,42,0,0,122,20,1,0,0,0,123,124,
		5,47,0,0,124,22,1,0,0,0,125,126,5,43,0,0,126,24,1,0,0,0,127,128,5,45,0,
		0,128,26,1,0,0,0,129,130,5,61,0,0,130,131,5,61,0,0,131,28,1,0,0,0,132,
		133,5,33,0,0,133,134,5,61,0,0,134,30,1,0,0,0,135,136,5,60,0,0,136,32,1,
		0,0,0,137,138,5,62,0,0,138,34,1,0,0,0,139,140,5,60,0,0,140,141,5,61,0,
		0,141,36,1,0,0,0,142,143,5,62,0,0,143,144,5,61,0,0,144,38,1,0,0,0,145,
		146,5,105,0,0,146,147,5,102,0,0,147,40,1,0,0,0,148,149,5,116,0,0,149,150,
		5,104,0,0,150,151,5,101,0,0,151,152,5,110,0,0,152,42,1,0,0,0,153,154,5,
		101,0,0,154,155,5,108,0,0,155,156,5,115,0,0,156,157,5,101,0,0,157,44,1,
		0,0,0,158,159,5,101,0,0,159,160,5,110,0,0,160,161,5,100,0,0,161,162,5,
		105,0,0,162,163,5,102,0,0,163,46,1,0,0,0,164,165,5,116,0,0,165,166,5,111,
		0,0,166,48,1,0,0,0,167,168,5,105,0,0,168,169,5,110,0,0,169,187,5,116,0,
		0,170,171,5,100,0,0,171,172,5,111,0,0,172,173,5,117,0,0,173,174,5,98,0,
		0,174,175,5,108,0,0,175,187,5,101,0,0,176,177,5,115,0,0,177,178,5,116,
		0,0,178,179,5,114,0,0,179,180,5,105,0,0,180,181,5,110,0,0,181,187,5,103,
		0,0,182,183,5,98,0,0,183,184,5,111,0,0,184,185,5,111,0,0,185,187,5,108,
		0,0,186,167,1,0,0,0,186,170,1,0,0,0,186,176,1,0,0,0,186,182,1,0,0,0,187,
		50,1,0,0,0,188,189,5,115,0,0,189,190,5,101,0,0,190,191,5,116,0,0,191,52,
		1,0,0,0,192,193,5,112,0,0,193,194,5,114,0,0,194,195,5,105,0,0,195,196,
		5,110,0,0,196,197,5,116,0,0,197,54,1,0,0,0,198,199,5,109,0,0,199,200,5,
		111,0,0,200,201,5,100,0,0,201,56,1,0,0,0,202,203,5,109,0,0,203,204,5,101,
		0,0,204,205,5,109,0,0,205,58,1,0,0,0,206,207,5,102,0,0,207,208,5,114,0,
		0,208,209,5,101,0,0,209,210,5,101,0,0,210,211,5,109,0,0,211,212,5,101,
		0,0,212,213,5,109,0,0,213,60,1,0,0,0,214,215,5,116,0,0,215,216,5,114,0,
		0,216,217,5,117,0,0,217,224,5,101,0,0,218,219,5,102,0,0,219,220,5,97,0,
		0,220,221,5,108,0,0,221,222,5,115,0,0,222,224,5,101,0,0,223,214,1,0,0,
		0,223,218,1,0,0,0,224,62,1,0,0,0,225,229,5,34,0,0,226,228,9,0,0,0,227,
		226,1,0,0,0,228,231,1,0,0,0,229,230,1,0,0,0,229,227,1,0,0,0,230,232,1,
		0,0,0,231,229,1,0,0,0,232,233,5,34,0,0,233,64,1,0,0,0,234,239,3,5,2,0,
		235,238,3,5,2,0,236,238,3,7,3,0,237,235,1,0,0,0,237,236,1,0,0,0,238,241,
		1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,66,1,0,0,0,241,239,1,0,0,0,
		242,243,3,9,4,0,243,248,3,5,2,0,244,247,3,5,2,0,245,247,3,7,3,0,246,244,
		1,0,0,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,
		0,249,68,1,0,0,0,250,248,1,0,0,0,251,253,3,7,3,0,252,251,1,0,0,0,253,254,
		1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,258,5,46,0,
		0,257,259,3,7,3,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,
		261,1,0,0,0,261,70,1,0,0,0,262,264,3,7,3,0,263,262,1,0,0,0,264,265,1,0,
		0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,72,1,0,0,0,267,269,7,2,0,0,268,
		267,1,0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,74,1,0,
		0,0,272,273,5,32,0,0,273,274,1,0,0,0,274,275,6,37,0,0,275,76,1,0,0,0,15,
		0,93,97,109,186,223,229,237,239,246,248,254,260,265,270,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
